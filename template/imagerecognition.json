{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"storageAccounts_jjimages_name": {
			"defaultValue": "jjimagesjj",
			"type": "String",
			"metadata": {
				"description": "Storage account name. Must be unique"
			}
		},
		"vaults_jjimageprocessing_name": {
			"defaultValue": "jjimageprocessingjj",
			"type": "String",
			"metadata": {
				"description": "Key vault name. Must be unique"
			}
		},
		"accounts_jjimagerecog_name": {
			"defaultValue": "jjimagerecogjj",
			"type": "String",
			"metadata": {
				"description": "Cognitive Services account name. Must be unique"
			}
		},
		"blob-url": {
			"defaultValue": "xxx-url-blob-account-xxx",
			"type": "String",
			"metadata": {
				"description": "Storage account URL. Can be set later in key vault"
			}
		},
		"cognitive-url": {
			"defaultValue": "xxx-cognitive-account-xxx",
			"type": "String",
			"metadata": {
				"description": "Cognitive services URL. Can be set later in key vault"
			}
		},
		"cognitive-key": {
			"defaultValue": "xxx-cognitive-key-xxxx",
			"type": "String",
			"metadata": {
				"description": "Cogntive services key. Can be set later in key vault"
			}
		},
		"objectId": {
			"defaultValue": "4b82825e-ed8a-4a99-86eb-71e2b142dcdd",
			"type": "String",
			"metadata": {
				"description": "ObjectId of the user of the target subscription"
			}
		}
	},
	"variables": {},
	"resources": [
		{
			"type": "Microsoft.CognitiveServices/accounts",
			"apiVersion": "2017-04-18",
			"name": "[parameters('accounts_jjimagerecog_name')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "S0"
			},
			"kind": "CognitiveServices",
			"properties": {
				"apiProperties": {
					"statisticsEnabled": false
				}
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults",
			"apiVersion": "2016-10-01",
			"name": "[parameters('vaults_jjimageprocessing_name')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"sku": {
					"family": "A",
					"name": "Standard"
				},
				"tenantId": "[subscription().tenantId]",
				"accessPolicies": [
					{
						"tenantId": "[subscription().tenantId]",
						"objectId": "[parameters('objectId')]",
						"permissions": {
							"keys": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore"
							],
							"secrets": [
								"Get",
								"List",
								"Set",
								"Delete",
								"Recover",
								"Backup",
								"Restore"
							],
							"certificates": [
								"Get",
								"List",
								"Update",
								"Create",
								"Import",
								"Delete",
								"Recover",
								"Backup",
								"Restore",
								"ManageContacts",
								"ManageIssuers",
								"GetIssuers",
								"ListIssuers",
								"SetIssuers",
								"DeleteIssuers"
							]
						}
					}
				],
				"enabledForDeployment": false,
				"enabledForDiskEncryption": false,
				"enabledForTemplateDeployment": false
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2019-04-01",
			"name": "[parameters('storageAccounts_jjimages_name')]",
			"location": "[resourceGroup().location]",
			"sku": {
				"name": "Standard_RAGRS",
				"tier": "Standard"
			},
			"kind": "StorageV2",
			"properties": {
				"networkAcls": {
					"bypass": "AzureServices",
					"virtualNetworkRules": [],
					"ipRules": [],
					"defaultAction": "Allow"
				},
				"supportsHttpsTrafficOnly": true,
				"encryption": {
					"services": {
						"file": {
							"enabled": true
						},
						"blob": {
							"enabled": true
						}
					},
					"keySource": "Microsoft.Storage"
				},
				"accessTier": "Hot"
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "azureblob",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "azureblob",
				"customParameterValues": {},
				"api": {
					"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "keyvault",
			"location": "[resourceGroup().location]",
			"properties": {
				"displayName": "keyvault",
				"customParameterValues": {},
				"api": {
					"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
				}
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults/secrets",
			"apiVersion": "2016-10-01",
			"name": "[concat(parameters('vaults_jjimageprocessing_name'), '/blob-url')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_jjimageprocessing_name'))]"
			],
			"properties": {
				"attributes": {
					"enabled": true
				},
				"value": "[parameters('blob-url')]"
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults/secrets",
			"apiVersion": "2016-10-01",
			"name": "[concat(parameters('vaults_jjimageprocessing_name'), '/cognitive-key')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_jjimageprocessing_name'))]"
			],
			"properties": {
				"attributes": {
					"enabled": true
				},
				"value": "[parameters('cognitive-key')]"
			}
		},
		{
			"type": "Microsoft.KeyVault/vaults/secrets",
			"apiVersion": "2016-10-01",
			"name": "[concat(parameters('vaults_jjimageprocessing_name'), '/congitive-url')]",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_jjimageprocessing_name'))]"
			],
			"properties": {
				"attributes": {
					"enabled": true
				},
				"value": "[parameters('cognitive-url')]"
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts/blobServices",
			"apiVersion": "2019-04-01",
			"name": "[concat(parameters('storageAccounts_jjimages_name'), '/default')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_jjimages_name'))]"
			],
			"properties": {
				"cors": {
					"corsRules": []
				},
				"deleteRetentionPolicy": {
					"enabled": false
				}
			}
		},
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "classify-image",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', 'azureblob')]",
				"[resourceId('Microsoft.Web/connections', 'keyvault')]"
			],
			"properties": {
				"state": "Enabled",
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						}
					},
					"triggers": {
						"manual": {
							"type": "Request",
							"kind": "Http",
							"inputs": {
								"schema": {
									"properties": {
										"$content": {
											"type": "string"
										},
										"$content-type": {
											"type": "string"
										},
										"$multipart": {
											"items": {
												"properties": {
													"body": {
														"properties": {
															"$content": {
																"type": "string"
															},
															"$content-type": {
																"type": "string"
															}
														},
														"type": "object"
													},
													"headers": {
														"properties": {
															"Content-Disposition": {
																"type": "string"
															},
															"Content-Type": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"headers",
													"body"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							}
						}
					},
					"actions": {
						"Create_blob_2": {
							"runAfter": {
								"Set_Filename": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"body": "@base64ToBinary(triggerBody()?['$multipart'][0]['body']['$content'])",
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureblob']['connectionId']"
									}
								},
								"method": "post",
								"path": "/datasets/default/files",
								"queries": {
									"folderPath": "/images",
									"name": "@variables('filename')",
									"queryParametersSingleEncoded": true
								}
							},
							"runtimeConfiguration": {
								"contentTransfer": {
									"transferMode": "Chunked"
								}
							}
						},
						"Get_blob_url": {
							"runAfter": {
								"Get_cognitive_url": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['keyvault']['connectionId']"
									}
								},
								"method": "get",
								"path": "/secrets/@{encodeURIComponent('blob-url')}/value"
							}
						},
						"Get_cognitive_key": {
							"runAfter": {},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['keyvault']['connectionId']"
									}
								},
								"method": "get",
								"path": "/secrets/@{encodeURIComponent('cognitive-key')}/value"
							}
						},
						"Get_cognitive_url": {
							"runAfter": {
								"Get_cognitive_key": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['keyvault']['connectionId']"
									}
								},
								"method": "get",
								"path": "/secrets/@{encodeURIComponent('congitive-url')}/value"
							}
						},
						"HTTP": {
							"runAfter": {
								"Create_blob_2": [
									"Succeeded"
								]
							},
							"type": "Http",
							"inputs": {
								"body": {
									"url": "@{body('Get_blob_url')?['value']}/images/@{variables('filename')}"
								},
								"headers": {
									"Ocp-Apim-Subscription-Key": "@body('Get_cognitive_key')?['value']"
								},
								"method": "POST",
								"queries": {
									"maxCandidates": "1"
								},
								"uri": "@{body('Get_cognitive_url')?['value']}/vision/v1.0/describe"
							}
						},
						"Initialize_filename": {
							"runAfter": {
								"init_cd": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "filename",
										"type": "String",
										"value": "xxx"
									}
								]
							}
						},
						"Response": {
							"runAfter": {
								"HTTP": [
									"Succeeded"
								]
							},
							"type": "Response",
							"kind": "Http",
							"inputs": {
								"body": "<body>\n\t\t<h1>@{body('HTTP')?['description']['captions'][0]['text']}</h1>\n\t<img src=\"@{body('Get_blob_url')?['value']}/images/@{variables('filename')}\" style=\"width:50%\"> \n        <p>\n        Tags:  @{body('HTTP')?['description']['tags']}\n</body>",
								"headers": {
									"Content-Type": "text/html",
									"title": "Image Classification Response"
								},
								"statusCode": "@outputs('HTTP')['statusCode']"
							}
						},
						"Set_CD": {
							"runAfter": {
								"init_length": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "cd",
								"value": "@{triggerBody()?['$multipart'][0]['headers']['Content-Disposition']}"
							}
						},
						"Set_Filename": {
							"runAfter": {
								"Set_length": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "filename",
								"value": "@{substring(variables('cd'), 34, sub(variables('length'), 35))}"
							}
						},
						"Set_length": {
							"runAfter": {
								"Set_CD": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "length",
								"value": "@length(variables('cd'))"
							}
						},
						"init_cd": {
							"runAfter": {
								"Get_blob_url": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "cd",
										"type": "String",
										"value": "XXX"
									}
								]
							}
						},
						"init_length": {
							"runAfter": {
								"Initialize_filename": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "length",
										"type": "Integer",
										"value": 0
									}
								]
							}
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
						"value": {
							"azureblob": {
								"connectionId": "[resourceId('Microsoft.Web/connections', 'azureblob')]",
								"connectionName": "azureblob",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
							},
							"keyvault": {
								"connectionId": "[resourceId('Microsoft.Web/connections', 'keyvault')]",
								"connectionName": "keyvault",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
							}
						}
					}
				}
			}
		},
		{
			"type": "Microsoft.Logic/workflows",
			"apiVersion": "2017-07-01",
			"name": "find-the-celeb",
			"location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', 'azureblob')]",
				"[resourceId('Microsoft.Web/connections', 'keyvault')]"
			],
			"properties": {
				"state": "Enabled",
				"definition": {
					"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"$connections": {
							"defaultValue": {},
							"type": "Object"
						}
					},
					"triggers": {
						"manual": {
							"type": "Request",
							"kind": "Http",
							"inputs": {
								"schema": {
									"properties": {
										"$content": {
											"type": "string"
										},
										"$content-type": {
											"type": "string"
										},
										"$multipart": {
											"items": {
												"properties": {
													"body": {
														"properties": {
															"$content": {
																"type": "string"
															},
															"$content-type": {
																"type": "string"
															}
														},
														"type": "object"
													},
													"headers": {
														"properties": {
															"Content-Disposition": {
																"type": "string"
															},
															"Content-Type": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"headers",
													"body"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							}
						}
					},
					"actions": {
						"Any_celebs_returned": {
							"actions": {
								"Confidence_high": {
									"actions": {
										"Set_variable": {
											"runAfter": {},
											"type": "SetVariable",
											"inputs": {
												"name": "reply",
												"value": "@{concat('I am sure it is ', body('Parse_JSON')?['result']?['celebrities'][0]['name'], ', confidence: ', body('Parse_JSON')?['result']?['celebrities'][0]['confidence'])}"
											}
										}
									},
									"runAfter": {},
									"else": {
										"actions": {
											"Set_variable_2": {
												"runAfter": {},
												"type": "SetVariable",
												"inputs": {
													"name": "reply",
													"value": "@{concat('I am not sure. Is it ', body('Parse_JSON')?['result']?['celebrities'][0]['name'], '?, confidence: ', body('Parse_JSON')?['result']?['celebrities'][0]['confidence'])}"
												}
											}
										}
									},
									"expression": {
										"and": [
											{
												"greater": [
													"@body('Parse_JSON')?['result']?['celebrities'][0]['confidence']",
													0.9
												]
											}
										]
									},
									"type": "If"
								}
							},
							"runAfter": {
								"Parse_JSON": [
									"Succeeded"
								]
							},
							"else": {
								"actions": {
									"Set_variable_4": {
										"runAfter": {},
										"type": "SetVariable",
										"inputs": {
											"name": "reply",
											"value": "There seems to be a problem :-("
										}
									}
								}
							},
							"expression": {
								"and": [
									{
										"equals": [
											"@empty(body('Parse_JSON')?['result']?['celebrities'])",
											false
										]
									}
								]
							},
							"type": "If"
						},
						"Create_blob_2": {
							"runAfter": {
								"Set_Filename": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"body": "@base64ToBinary(triggerBody()?['$multipart'][0]['body']['$content'])",
								"host": {
									"connection": {
										"name": "@parameters('$connections')['azureblob']['connectionId']"
									}
								},
								"method": "post",
								"path": "/datasets/default/files",
								"queries": {
									"folderPath": "/images",
									"name": "@variables('filename')",
									"queryParametersSingleEncoded": true
								}
							},
							"runtimeConfiguration": {
								"contentTransfer": {
									"transferMode": "Chunked"
								}
							}
						},
						"Get_blob_url": {
							"runAfter": {
								"Get_cognitive_url": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['keyvault']['connectionId']"
									}
								},
								"method": "get",
								"path": "/secrets/@{encodeURIComponent('blob-url')}/value"
							}
						},
						"Get_cognitive_key": {
							"runAfter": {},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['keyvault']['connectionId']"
									}
								},
								"method": "get",
								"path": "/secrets/@{encodeURIComponent('cognitive-key')}/value"
							}
						},
						"Get_cognitive_url": {
							"runAfter": {
								"Get_cognitive_key": [
									"Succeeded"
								]
							},
							"type": "ApiConnection",
							"inputs": {
								"host": {
									"connection": {
										"name": "@parameters('$connections')['keyvault']['connectionId']"
									}
								},
								"method": "get",
								"path": "/secrets/@{encodeURIComponent('congitive-url')}/value"
							}
						},
						"HTTP": {
							"runAfter": {
								"Create_blob_2": [
									"Succeeded"
								]
							},
							"type": "Http",
							"inputs": {
								"body": {
									"url": "@{body('Get_blob_url')?['value']}/images/@{variables('filename')}"
								},
								"headers": {
									"Ocp-Apim-Subscription-Key": "@body('Get_cognitive_key')?['value']"
								},
								"method": "POST",
								"queries": {
									"maxCandidates": "1"
								},
								"uri": "@{body('Get_cognitive_url')?['value']}/vision/v1.0/models/celebrities/analyze"
							}
						},
						"Initialize_filename": {
							"runAfter": {
								"init_cd": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "filename",
										"type": "String",
										"value": "xxx"
									}
								]
							}
						},
						"Initialize_reply": {
							"runAfter": {
								"Get_blob_url": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "reply",
										"type": "String",
										"value": "not found"
									}
								]
							}
						},
						"Parse_JSON": {
							"runAfter": {
								"HTTP": [
									"Succeeded"
								]
							},
							"type": "ParseJson",
							"inputs": {
								"content": "@body('HTTP')",
								"schema": {
									"properties": {
										"metadata": {
											"properties": {
												"format": {
													"type": "string"
												},
												"height": {
													"type": "integer"
												},
												"width": {
													"type": "integer"
												}
											},
											"type": "object"
										},
										"requestId": {
											"type": "string"
										},
										"result": {
											"properties": {
												"celebrities": {
													"items": {
														"properties": {
															"confidence": {
																"type": "number"
															},
															"faceRectangle": {
																"properties": {
																	"height": {
																		"type": "integer"
																	},
																	"left": {
																		"type": "integer"
																	},
																	"top": {
																		"type": "integer"
																	},
																	"width": {
																		"type": "integer"
																	}
																},
																"type": "object"
															},
															"name": {
																"type": "string"
															}
														},
														"required": [
															"faceRectangle",
															"name",
															"confidence"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							}
						},
						"Response": {
							"runAfter": {
								"Any_celebs_returned": [
									"Succeeded"
								]
							},
							"type": "Response",
							"kind": "Http",
							"inputs": {
								"body": "<body>\n\t\t<h1>@{variables('reply')}</h1>\n\t<img src=\"@{body('Get_blob_url')?['value']}/images/@{variables('filename')}\" style=\"width:50%\"> \n        <p>\n</body>",
								"headers": {
									"Content-Type": "text/html"
								},
								"statusCode": "@outputs('HTTP')['statusCode']"
							}
						},
						"Set_CD": {
							"runAfter": {
								"init_length": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "cd",
								"value": "@{triggerBody()?['$multipart'][0]['headers']['Content-Disposition']}"
							}
						},
						"Set_Filename": {
							"runAfter": {
								"Set_length": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "filename",
								"value": "@{substring(variables('cd'), 34, sub(variables('length'), 35))}"
							}
						},
						"Set_length": {
							"runAfter": {
								"Set_CD": [
									"Succeeded"
								]
							},
							"type": "SetVariable",
							"inputs": {
								"name": "length",
								"value": "@length(variables('cd'))"
							}
						},
						"init_cd": {
							"runAfter": {
								"Initialize_reply": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "cd",
										"type": "String",
										"value": "XXX"
									}
								]
							}
						},
						"init_length": {
							"runAfter": {
								"Initialize_filename": [
									"Succeeded"
								]
							},
							"type": "InitializeVariable",
							"inputs": {
								"variables": [
									{
										"name": "length",
										"type": "Integer",
										"value": 0
									}
								]
							}
						}
					},
					"outputs": {}
				},
				"parameters": {
					"$connections": {
						"value": {
							"azureblob": {
								"connectionId": "[resourceId('Microsoft.Web/connections', 'azureblob')]",
								"connectionName": "azureblob",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
							},
							"keyvault": {
								"connectionId": "[resourceId('Microsoft.Web/connections', 'keyvault')]",
								"connectionName": "keyvault",
								"id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
							}
						}
					}
				}
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts/blobServices/containers",
			"apiVersion": "2019-04-01",
			"name": "[concat(parameters('storageAccounts_jjimages_name'), '/default/$web')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_jjimages_name'), 'default')]",
				"[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_jjimages_name'))]"
			],
			"properties": {
				"publicAccess": "None"
			}
		},
		{
			"type": "Microsoft.Storage/storageAccounts/blobServices/containers",
			"apiVersion": "2019-04-01",
			"name": "[concat(parameters('storageAccounts_jjimages_name'), '/default/images')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccounts_jjimages_name'), 'default')]",
				"[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_jjimages_name'))]"
			],
			"properties": {
				"publicAccess": "Blob"
			}
		}
	]
}